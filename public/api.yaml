openapi: 3.0.0
info:
  title: API Documentation
  description: Documentation complète de l'API pour les contrôleurs Article, Auth, Client, et User.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:3000/api
    description: Local server
  - url: http://production.app/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Article:
      type: object
      properties:
        id:
          type: integer
        libelle:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        qteStock:
          type: integer
        disponible:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Client:
      type: object
      properties:
        id:
          type: integer
        surname:
          type: string
        adresse:
          type: string
        telephone:
          type: string
        user_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        login:
          type: string
        photo:
          type: string
        role_id:
          type: integer
        active:
          type: string
          enum:
            - OUI
            - NON
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Dette:
      type: object
      properties:
        id:
          type: integer
        montant:
          type: number
          format: float
        montantRestant:
          type: number
          format: float
        statut:
          type: string
          enum: [EN_COURS, SOLDEE]
        client_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Paiement:
      type: object
      properties:
        id:
          type: integer
        montant:
          type: number
          format: float
        dette_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

security:
  - bearerAuth: []

paths:
  /v1/auth/login:
    post:
      tags:
        - Authentification
      summary: Authentification utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Authentification réussie
        '401':
          description: Identifiants incorrects

  /v1/auth/logout:
    post:
      tags:
        - Authentification
      summary: Déconnexion utilisateur
      responses:
        '200':
          description: Déconnexion réussie
        '401':
          description: Non authentifié

  /v1/articles:
    get:
      tags:
        - Articles
      summary: Liste tous les articles
      parameters:
        - name: disponible
          in: query
          description: Filtrer par disponibilité
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Liste des articles récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'

    post:
      tags:
        - Articles
      summary: Créer un nouvel article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '201':
          description: Article créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '403':
          description: Accès interdit

  /v1/articles/{id}:
    get:
      tags:
        - Articles
      summary: Afficher un article spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Article récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article non trouvé

    patch:
      tags:
        - Articles
      summary: Mettre à jour un article spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: Article mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article non trouvé

    delete:
      tags:
        - Articles
      summary: Supprimer un article spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Article supprimé avec succès
        '404':
          description: Article non trouvé

  /v1/articles/libelle/{libelle}:
    post:
      tags:
        - Articles
      summary: Récupérer un article par son libellé
      parameters:
        - name: libelle
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Article récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article non trouvé

  /v1/articles/stock:
    post:
      tags:
        - Articles
      summary: Mettre à jour le stock de plusieurs articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                articles:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      quantity:
                        type: integer
      responses:
        '200':
          description: Stock mis à jour avec succès
        '500':
          description: Erreur interne du serveur

  /v1/clients:
    get:
      tags:
        - Clients
      summary: Liste tous les clients
      responses:
        '200':
          description: Liste des clients récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'

    post:
      tags:
        - Clients
      summary: Créer un nouveau client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Client créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '500':
          description: Erreur lors de la création du client

  /v1/clients/{id}:
    get:
      tags:
        - Clients
      summary: Afficher un client spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Client récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client non trouvé

  /v1/users:
    get:
      tags:
        - Utilisateurs
      summary: Liste tous les utilisateurs
      parameters:
        - name: role
          in: query
          description: Filtrer par rôle (admin ou boutiquier)
          required: false
          schema:
            type: string
            enum: [admin, boutiquier]
        - name: active
          in: query
          description: Filtrer par statut d'activation (oui ou non)
          required: false
          schema:
            type: string
            enum: [oui, non]
      responses:
        '200':
          description: Liste des utilisateurs récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      tags:
        - Utilisateurs
      summary: Créer un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Accès interdit

  /v1/users/{id}:
    get:
      tags:
        - Utilisateurs
      summary: Afficher un utilisateur spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utilisateur non trouvé

  /v1/dettes:
    get:
      tags:
        - Dettes
      summary: Liste toutes les dettes
      parameters:
        - name: statut
          in: query
          description: Filtrer par statut
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Liste des dettes récupérée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dette'
                  message:
                    type: string
                  status:
                    type: string

    post:
      tags:
        - Dettes
      summary: Créer une nouvelle dette
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dette'
      responses:
        '201':
          description: Dette créée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  message:
                    type: string
                  status:
                    type: string

  /v1/dettes/{id}:
    get:
      tags:
        - Dettes
      summary: Afficher une dette spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Dette récupérée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  message:
                    type: string
                  status:
                    type: string

    delete:
      tags:
        - Dettes
      summary: Supprimer une dette spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Dette supprimée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: null
                  message:
                    type: string
                  status:
                    type: string

  /v1/dettes/{id}/articles:
    get:
      tags:
        - Dettes
      summary: Liste les articles d'une dette spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Articles de la dette récupérés avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  message:
                    type: string
                  status:
                    type: string

  /v1/dettes/{id}/paiements:
    get:
      tags:
        - Dettes
      summary: Liste les paiements d'une dette spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Paiements de la dette récupérés avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Paiement'
                  message:
                    type: string
                  status:
                    type: string

    post:
      tags:
        - Dettes
      summary: Ajouter un paiement à une dette
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                montant:
                  type: number
                  format: float
                  minimum: 0.01
      responses:
        '200':
          description: Paiement ajouté avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  message:
                    type: string
                  status:
                    type: string
